<div class="korea-marker-container inter-tableContentBase">
    <style>
        .inter-tableContentBase.korea-marker-container {
            position: relative;
        }

        .inter-tableContentBase.korea-marker-container .home-table {
            min-width: 320px;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li:hover {
            background: #f9fbff;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li {
            padding: 0;
            height: 50px;
            border-color: #e2e9ef;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li .even {
            width: 30%;
            line-height: 49px;
            padding: 0;
            display: inline-block;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li .newPrice {
            width: 35%;
            padding: 0;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li p {
            line-height: 24px;
            display: inline-block;
        }

        .inter-tableContentBase.korea-marker-container .home-table .home-tbody .home-tbody-list .home-tbody-li .even .rose-label {
            background: none !important;
            width: auto;
        }

        .inter-tableContentBase.korea-marker-container .tit {
            font-size: 26px;
            color: #31363e;
            margin-bottom: 18px;
        }
        .inter-tableContentBase.korea-marker-container .loading-page{
            text-align: center;
        }

    </style>
    <div class="home-table">
        <div class="home-loading">
            <div class="loading-page">
                {% import "../loading/loading.njk" as loading %}
                {{ loading.boxStyle(size=45) }}
            </div>
        </div>
        <div>
            <div class="home-tbody-box" style="display: none">
                <div class="tit">最新价格</div>
                <div class="home-tbody">
                    <div>
                        <ul class="home-tbody-list">

                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        (function () {
            const {myStorage, getScript} = window.BlockChainUtils;
            const extendPath = "{{sourceMap.marketExtend}}";
            const websocketPath = "{{sourceMap.webSocket}}";
            if (extendPath && !window.MarketExtend) {
                getScript(`${window.staticDomain}/home/static/${extendPath}`).then(() => {
                    class Market extends window.MarketExtend {
                        constructor() {
                            super();
                            this.$tableContent = document.querySelector('.korea-marker-container');
                            this.$homeLoading = this.$tableContent.querySelector('.home-loading');
                            this.$homeTbody = this.$tableContent.querySelector('.home-tbody-box');
                            this.$homeTbodyList = this.$tableContent.querySelector('.home-tbody-list');
                            this.optional_symbol_server_open = Number('{{switch.optional_symbol_server_open}}');
                            this.isLogin = window.isLogin;
                            this.hoverClass = 'a-12-bd f-1-cl';
                            this.locale = {
                                marketSet: "{{locale.home.marketSet}}",
                                halving: "{{locale.trade.halving}}",
                                maincon: '{{locale.trade.maincon}}',
                                newcon: '{{locale.trade.newcon}}',
                                seecon: '{{locale.trade.seecon}}',
                                unseal: '{{locale.trade.unseal}}',
                            };
                            this.tableDataList = {};
                            this.listfilter = null;
                            this.symbolAll = [];
                            this.marketDataList_bar = [];
                            this.MainAreaData = [];
                            this.CreateAreaData = [];
                            this.SeeAreaData = [];
                            this.hideAreaData = [];
                            this.unsealAreaData = [];
                            this.halveAreaData = [];
                            this.MainAreaFilter = []; // 主区币种
                            this.CreateAreaFilter = []; // 创新区币种
                            this.SeeAreaFilter = []; // 观察区币种
                            this.hideAreaFilter = []; // 隐藏区币种,
                            this.unsealAreaFilter = []; // 解封区币种
                            this.halveAreaFilter = []; // 减半区币种
                            this.createIng = false;
                            this.market = [];
                            this.setMyMarketSwitch = true;
                            this.tableTreeData = null;
                            this.rebuild = false;
                            this.tableTree = null;
                            this.firstLoad = false;
                            this.sortValue = 'sort';
                            this.sortSell = false;
                            this.marketCurrent = myStorage.get('homeMarkTitle');
                            this.columns = [
                                {
                                    title: '{{locale.home.market}}', // 市场
                                    key: 'sort',
                                    sortable: true,
                                },
                                {
                                    title: '{{locale.home.close}}', // 最新价
                                    key: 'closes',
                                    sortable: true,
                                },
                                {
                                    title: '{{locale.home.applies}}', // 涨跌幅
                                    key: 'roses',
                                    sortable: true,
                                },
                                {
                                    title: '{{locale.home.height}}', // 最高价
                                },
                                {
                                    title: '{{locale.home.low}}', // 最低价
                                },
                                {
                                    title: '{{locale.home.H_volume}}', // 24H成交量
                                },
                                {
                                    title: '{{locale.home.H_turnover}}', // 24小时成交额
                                },
                            ];
                            window.emitter.on('MARKET-DATA', (data, init) => {
                                if (init) {
                                    this.rebuild = true;
                                }
                                this.initTable(data);
                            });

                            window.emitter.on('send_market', (data) => {
                                this.init(data);
                            });
                        }

                        createTableHead() {
                        }

                        createMarketTitle() {
                        }

                        createTable(dataList) {
                            let html = '';
                            this.tableTreeData = {};
                            this.tableTree = {};
                            dataList.forEach((item) => {
                                const evenSymbol = item.data[0][1].iconSvg.match(/>(.+)</)[1];
                                if (!this.tableTreeData[evenSymbol]) {
                                    this.tableTreeData[evenSymbol] = {};
                                    this.tableTree[evenSymbol] = {};
                                }
                                this.tableTreeData[evenSymbol].price = item.data[1][0].text;
                                this.tableTreeData[evenSymbol].priceL = item.data[2][0].text;
                                this.tableTreeData[evenSymbol].priceClass = item.data[2][0].classes;
                                this.tableTreeData[evenSymbol].priceLClass = item.data[2][0].classes;
                                html += `<li class="home-tbody-li c-5-bd ${this.tableBg}" data-coin="${evenSymbol}">
                                    <div class="even">
                                      <span class="evenSymbol" data-id="${item.id}">${item.data[0][1].iconSvg}</span>
                                    </div>
                                    <div class="even newPrice">
                                      <p class="price ${item.data[2][0].classes.join(' ')}">
                                        ${item.data[1][0].text}
                                      </p>
                                    </div>
                                    <!-- 涨跌幅 -->
                                    <div class="even">
                                      <div class="priceL ${item.data[2][0].classes.join(' ')}">
                                        ${item.data[2][0].text}
                                      </div>
                                    </div>
                                    </li>`;
                            });
                            this.$homeTbodyList.innerHTML = html;
                            this.$homeTbodyList.querySelectorAll('.home-tbody-li').forEach((item) => {
                                const {coin} = item.dataset;
                                this.tableTree[coin].price = item.querySelector('.price');
                                this.tableTree[coin].priceL = item.querySelector('.priceL');
                            });
                            const len = this.dataLength(dataList);
                            this.$homeLoading.style.display = 'none';
                            if (dataList.length) {
                                this.$homeTbody.style.display = 'block';
                            }
                            this.createIng = false;
                            this.rebuild = false;
                            this.bindTableListEvent();
                        }

                        changeTable(dataList) {
                            dataList.forEach((item) => {
                                const evenSymbol = item.data[0][1].iconSvg.match(/>(.+)</)[1];
                                const price = item.data[1][0].text;
                                const priceL = item.data[2][0].text;
                                const cl = item.data[2][0].classes;
                                if (this.tableTreeData[evenSymbol]) {
                                    if (this.tableTreeData[evenSymbol].price !== price) {
                                        this.tableTree[evenSymbol].price.innerHTML = price;
                                        this.tableTreeData[evenSymbol].price = price;
                                    }

                                    if (this.tableTreeData[evenSymbol].priceL !== priceL) {
                                        this.tableTree[evenSymbol].priceL.innerHTML = priceL;
                                        this.tableTreeData[evenSymbol].priceL = priceL;
                                    }


                                    if (this.tableTreeData[evenSymbol].priceClass !== item.data[2][0].classes) {
                                        this.tableTree[evenSymbol].price.className = `price ${cl.join(' ')}`;
                                        this.tableTreeData[evenSymbol].priceClass = cl.classes;
                                        this.tableTree[evenSymbol].priceL.className = `priceL ${cl.join(' ')}`;
                                        this.tableTreeData[evenSymbol].priceLClass = cl.classes;
                                    }
                                }
                            });
                        }

                        bindEvent() {
                        }

                        overHandler(target) {
                            // eslint-disable-next-line no-param-reassign
                            let cl = '';
                            if (this.tableListOverClass) {
                                cl = this.tableListOverClass;
                            }
                            target.className = `home-tbody-li c-5-bd ${cl}`;
                        }

                        everySymbolClick(target) {
                            const { etfOpen } = target.dataset;
                            const data = target.dataset.id;
                            myStorage.set('sSymbolName', data);
                            if (etfOpen) {
                                myStorage.set('markTitle', 'ETF');
                            } else {
                                myStorage.set('markTitle', data.split('/')[1]);
                            }
                            location.href = '/trade';
                        }

                        setTableData(data) {
                            const arr = [];
                            data.forEach((item) => {
                                item.data.forEach((subItem) => {
                                    if (arr.length < 5) {
                                        arr.push(subItem);
                                    }
                                });
                                return false;
                            });
                            return arr;
                        }

                        initTable(data) {
                            this.unBindTableListEvent();
                            this.filterArea();
                            this.resloveData(data);
                            this.tableDataList = this.setTableData(this.tableData());
                            if (!this.firstLoad || this.rebuild) {
                                this.$homeTbody.style.display = 'none';
                                this.$homeLoading.style.display = 'block';
                                this.firstLoad = true;
                                this.createIng = true;
                                this.createTable(this.tableDataList);
                            } else if (!this.createIng && !this.rebuild) {
                                this.changeTable(this.tableDataList);
                            }
                        }
                    }

                    if (websocketPath && !window.selfSocket) {
                        getScript(`${window.staticDomain}/home/static/${websocketPath}`);
                    }
                    new Market();
                });
            }
            if (websocketPath && !window.selfSocket) {
                window.selfSocket = true;
                getScript(`${window.staticDomain}/home/static/${websocketPath}`);
            }
        })();
    </script>
</div>
